@import url('https://fonts.googleapis.com/css2?family=Fira+Sans+Condensed:wght@600&family=Fira+Sans:wght@300;400;500;600;700;800&display=swap');

$fira: "Fira Sans", sans-serif;

@mixin from($breakpoint) {
    @media screen and (min-width: $breakpoint) {
        @content;
    }
}

@mixin until($breakpoint) {
    @media screen and (max-width: Calc($breakpoint - 1px)) {
        @content;
    }
}

@function bannerGradient($isMobile: false) {
    $transparency: 50%;
    @if $isMobile {
        $transparency: -$transparency;
    }
    @return linear-gradient(
        to left,
        transparent $transparency,
        rgba(255, 255, 255, 0.9) 80%
    );

}

$white: #fff;
$grey: #bdbdbd;
$black: #00240f;
$red: #ec0000;
$green: #05a84b;

$breakpoint1: 510px;
$breakpoint2: 665px;

@mixin axisAlignment($justifyContent: null, $alignItems: null) {
    @if $justifyContent {
        justify-content: $justifyContent;
    }
    @if $alignItems {
        align-items: $alignItems;
    }
}

html body {
    min-height: 100vh;
    width: 100vw;
    padding-bottom: 4rem;
    overflow-x: hidden;

    &, select {
        font-family: $fira;
    }
}

header {

    nav {
        @include axisAlignment(space-between);
        @include until($breakpoint1) {
            flex-direction: column;
            gap: 1rem;
            padding: 1rem 2rem;
        }

        padding: 1rem 3.5rem 1rem 2rem;

        > a {
            align-self: center;

            &:nth-of-type(2) {
                color: $red;
            }
        }

        > div {
            @include axisAlignment(center);
            @include until($breakpoint1) {
                margin-left: 1rem;
                transform: scale(1.1);

                &.gap-6 {
                    row-gap: 1rem;
                }
            }

            margin-left: 3rem;
            flex-wrap: wrap;

            ul {
                @include axisAlignment(null, center);
                @include until($breakpoint1) {
                    flex-wrap: nowrap;
                }

                flex-wrap: wrap;

                li {
                    a {
                        &:not(.button):hover {
                            @extend .active;
                        }

                        img {
                            vertical-align: bottom;
                        }
                    }
                }
            }
        }
    }
}

a.active {
    color: $red;
}

@mixin transition($property) {
    transition: $property .085s ease;
}

.d-flex {
    display: flex;

    &-column {
        @extend .d-flex;

        flex-direction: column;
    }
}

#banner {
    @include axisAlignment(start);
    @include until($breakpoint1) {
        @include axisAlignment(center)
    }

    margin-bottom: 4rem;

    > div {

        &:first-child {
            @include axisAlignment(center, center);
            @include until($breakpoint1) {
                position: absolute;
                padding-top: 25vh;
                width: unset;
                padding-left: 2rem;
            }

            @include from($breakpoint1) {
                background-color: rgba(255, 255, 255, 0.9);

                @include until($breakpoint2) {
                    flex-shrink: 0;

                    h2 {
                        z-index: 1;
                        white-space: nowrap;
                    }
                }
            }

            width: 50%;
            padding-bottom: 3rem;
            padding-left: Calc(25vh - 9%);

            > div {
                @include axisAlignment(null, start);
            }
        }

        &:last-child {
            width: auto;
            user-select: none;
            background: bannerGradient();
            
            @include until($breakpoint1) {
                background: bannerGradient(true);
            }

            img {
                position: relative;
                z-index: -1;

                @include from($breakpoint1) {
                    @include until($breakpoint2) {
                        right: 75%;
                    }
                }
            }
        }
    }
}

#menu {

    > h3 {
        text-align: center;
        margin-bottom: 3rem;
    }

    > div {
        @include axisAlignment(center);

        flex-wrap: wrap;
        padding: 0 5rem;
    }

    article {
        @include axisAlignment(null, center);

        flex: 0 0 22%;
        padding: 1.5rem 1rem;
        border: 1px solid $grey;
        border-radius: 180px 180px 30px 30px;

        figure img {
            border-radius: 50%;
        }

        &:hover {
            box-shadow: 0 0 2rem #bdbdbd;
        }

        > div {

            &:first-of-type {
                @include axisAlignment(null, center);

                text-align: center;

                p {
                    font-weight: 300;
                    line-height: 1.2rem;
                }

                + h4 {
                    font-size: 1.3rem;
                    color: $green;
                    margin-top: auto;
                }
            }

            &:last-of-type {
                align-self: stretch;
                
                select {
                    background-color: $white;
                    border: 1px solid $black;
                    border-radius: 25px;
                    padding: .8rem;
                    font-size: 1.1rem;
                    appearance: none;
                    cursor: pointer;
                    background: url("../img/icon-caret-down.svg") no-repeat calc(100% - 10px);

                    @include transition(background-color);

                    &:hover {
                        background-color: $black;
                        color: $white;
                    }
                }

                a.button {
                    padding: .8rem;
                }
            }

        }
    }
}

$spacer: 1rem;
$multipliers: (
    0: 0,
    1: .25,
    2: .5,
    3: .75,
    4: 1,
    5: 1.5,
    6: 2,
    7: 2.5
);

@each $num, $value in $multipliers {
    .gap-#{$num} {
        gap: $spacer * $value;
    }
}



.button {
    display: block;
    background-color: $red;
    text-transform: uppercase;
    text-align: center;
    color: $white;
    font-weight: 500;
    padding: .625rem 1.5rem;
    border-radius: 25px;
    white-space: nowrap;

    @include transition("background-color");

    &:hover {
        background-color: #b80909;
    }

    &-lg {
        @extend .button;

        font-size: 1.3rem;
        padding: {
            left: .8rem;
            right: .8rem;
        }
    }
}

$title-rules: (
    2: (
        font-size: 3.375rem,
        font-weight: 600
    ),
    3: (
        font-size: 1.8rem,
        font-weight: 500
    ),
    4: (
        font-size: 1.3rem,
        font-weight: 500
    )
);

@each $num, $rules in $title-rules {
    h#{$num} {
        @each $prop, $val in $rules {
            #{$prop}: $val;
        }
    }
}
